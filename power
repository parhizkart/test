import streamlit as st
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Helper function to calculate DNS, PLOLE, and PLOEE
def calculate_reliability_metrics(load_data, generation_units, num_samples, T):
    # Create synthetic load samples
    load_samples = {}
    for i, load in enumerate(load_data):
        mean_load = load['Load']
        std_dev = 0.1 * mean_load  # Assume 10% std deviation
        load_samples[i] = np.random.normal(mean_load, std_dev, num_samples)

    # Linear regression model for generation
    X_gen = np.array([0.8, 0.85, 0.9, 0.95, 1.0]).reshape(-1, 1)  # Example availability
    y_gen = np.array([80, 150, 200, 250, 300])  # Example MV outputs
    linear_regressor = LinearRegression()
    linear_regressor.fit(X_gen, y_gen)

    # Generate generation samples
    generation_samples = []
    availability_probabilities = []
    for _ in range(num_samples):
        availability = np.random.uniform(0.8, 1.0, len(generation_units))  # Random availabilities
        gen_sample = linear_regressor.predict(availability.reshape(-1, 1)).clip(min=0)
        generation_samples.append(gen_sample.sum())
        availability_probabilities.append(np.prod(availability))  # Multiply probabilities for all generators

    # Calculate DNS, PLOLE, and PLOEE
    dns_results = []
    PLOLE_values = []
    PLOEE_values = []

    for k in range(num_samples):
        for i, load_sample in load_samples.items():
            L_i = load_sample[k]
            G_jk = generation_samples[k]
            DNS_k = max(0, L_i - G_jk)
            E_ijk = 1 if DNS_k > 0 else 0
            P_ik = load_data[i]['Probability']
            P_jk = availability_probabilities[k]

            # PLOLE and PLOEE contributions
            PLOLE_k = P_ik * P_jk * E_ijk * T
            PLOEE_k = P_ik * P_jk * DNS_k * T

            # Accumulate values
            PLOLE_values.append(PLOLE_k)
            PLOEE_values.append(PLOEE_k)

            # Store DNS results
            dns_results.append({
                'Sample': k + 1,
                'Load Level': load_data[i]['Load'],
                'DNS': DNS_k,
            })

    dns_df = pd.DataFrame(dns_results)
    return dns_df, PLOLE_values, PLOEE_values


# Streamlit Application
st.title("Reliability Analysis Platform")

# Input Section
st.sidebar.header("Inputs")

# Load Data Inputs
num_loads = st.sidebar.number_input("Number of Load Levels", min_value=1, value=2)
load_data = []
for i in range(num_loads):
    load = st.sidebar.number_input(f"Load Level {i+1} (MW)", min_value=0.0, value=float(100 * (i+1)))
    prob = st.sidebar.number_input(f"Probability for Load Level {i+1}", min_value=0.0, max_value=1.0, value=0.5)
    load_data.append({'Load': load, 'Probability': prob})

# Generation Unit Inputs
num_units = st.sidebar.number_input("Number of Generation Units", min_value=1, value=3)
generation_units = {}
for i in range(num_units):
    unit_name = st.sidebar.text_input(f"Name of Unit {i+1}", value=f"Unit_{i+1}")
    capacity = st.sidebar.number_input(f"Capacity of {unit_name} (MW)", min_value=0.0, value=100.0)
    unavailability = st.sidebar.number_input(f"Unavailability of {unit_name}", min_value=0.0, max_value=1.0, value=0.1)
    generation_units[unit_name] = {'MV': capacity, 'Unavailability': unavailability}

# Total Time Period
T = st.sidebar.number_input("Total Time Period (hours)", min_value=1.0, value=8760.0)

# Perform Calculations
if st.button("Run Analysis"):
    dns_df, PLOLE_values, PLOEE_values = calculate_reliability_metrics(load_data, generation_units, num_samples=1000, T=T)

    # Display Results
    st.subheader("PLOLE and PLOEE Results")
    st.write(f"PLOLE: {sum(PLOLE_values)} hours per time period")
    st.write(f"PLOEE: {sum(PLOEE_values)} MWh per time period")

    st.subheader("DNS Results")
    st.dataframe(dns_df)

    # Histograms
    st.subheader("Histograms")
    fig, ax = plt.subplots()
    ax.hist(PLOLE_values, bins=30, alpha=0.7, color='blue', label='PLOLE')
    ax.set_title("PLOLE Histogram")
    st.pyplot(fig)

    fig, ax = plt.subplots()
    ax.hist(PLOEE_values, bins=30, alpha=0.7, color='green', label='PLOEE')
    ax.set_title("PLOEE Histogram")
    st.pyplot(fig)

    # Exceedance Curves
    st.subheader("Exceedance Curves")
    fig, ax = plt.subplots()
    ax.plot(sorted(PLOLE_values), np.linspace(1, 0, len(PLOLE_values)), color='blue', label='PLOLE Exceedance Curve')
    ax.set_title("PLOLE Exceedance Curve")
    st.pyplot(fig)

    fig, ax = plt.subplots()
    ax.plot(sorted(PLOEE_values), np.linspace(1, 0, len(PLOEE_values)), color='green', label='PLOEE Exceedance Curve')
    ax.set_title("PLOEE Exceedance Curve")
    st.pyplot(fig)
